#include <imgui.h>
#include <imgui_impl_glfw.h>
#include <imgui_impl_opengl3.h>
#include <GL/gl3w.h>    // Initialize with gl3wInit()

#include <GLFW/glfw3.h>

#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>

using namespace std;

const int GRID_SIZE = 5;
const float NODE_PROBABILITY = 0.3f; // Probability of a cell being a node

struct Cell {
    bool isNode;
    bool isStart;
    bool isEnd;
};

class Puzzle {
private:
    vector<vector<Cell>> grid;
    pair<int, int> start;
    pair<int, int> end;

public:
    Puzzle() {
        grid.resize(GRID_SIZE, vector<Cell>(GRID_SIZE, {false, false, false}));
    }

    void generate() {
        srand(time(nullptr));

        // Randomly select start and end positions
        start = {rand() % GRID_SIZE, rand() % GRID_SIZE};
        end = {rand() % GRID_SIZE, rand() % GRID_SIZE};

        // Mark selected cells as start and end
        grid[start.first][start.second].isStart = true;
        grid[end.first][end.second].isEnd = true;

        // Randomly place nodes
        for (int i = 0; i < GRID_SIZE; ++i) {
            for (int j = 0; j < GRID_SIZE; ++j) {
                if (!(i == start.first && j == start.second) && !(i == end.first && j == end.second)) {
                    if ((float)rand() / RAND_MAX < NODE_PROBABILITY) {
                        grid[i][j].isNode = true;
                    }
                }
            }
        }
    }

    void display() {
        ImGui::Begin("Puzzle Grid");

        for (int i = 0; i < GRID_SIZE; ++i) {
            for (int j = 0; j < GRID_SIZE; ++j) {
                if (grid[i][j].isStart) ImGui::TextColored(ImVec4(0, 1, 0, 1), "S ");
                else if (grid[i][j].isEnd) ImGui::TextColored(ImVec4(1, 0, 0, 1), "E ");
                else if (grid[i][j].isNode) ImGui::Text("O ");
                else ImGui::Text("Â· ");
                ImGui::SameLine();
            }
        }

        ImGui::End();
    }
};

int main() {
    // Setup window
    glfwSetErrorCallback([](int error, const char* description) {
        fprintf(stderr, "Error %d: %s\n", error, description);
    });

    if (!glfwInit())
        return 1;

    GLFWwindow* window = glfwCreateWindow(800, 600, "The Witness-like Puzzle", nullptr, nullptr);
    if (!window)
        return 1;

    glfwMakeContextCurrent(window);
    glfwSwapInterval(1); // Enable vsync

    bool err = gl3wInit() != 0;
    if (err) {
        fprintf(stderr, "Failed to initialize OpenGL loader!\n");
        return 1;
    }

    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO(); (void)io;

    ImGui_ImplGlfw_InitForOpenGL(window, true);
    ImGui_ImplOpenGL3_Init("#version 130");

    Puzzle puzzle;
    puzzle.generate();

    // Main loop
    while (!glfwWindowShouldClose(window)) {
        glfwPollEvents();

        // Start the ImGui frame
        ImGui_ImplOpenGL3_NewFrame();
        ImGui_ImplGlfw_NewFrame();
        ImGui::NewFrame();

        // Render ImGui elements
        puzzle.display();

        // Rendering
        ImGui::Render();
        int display_w, display_h;
        glfwGetFramebufferSize(window, &display_w, &display_h);
        glViewport(0, 0, display_w, display_h);
        glClearColor(0.45f, 0.55f, 0.60f, 1.00f);
        glClear(GL_COLOR_BUFFER_BIT);
        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());

        glfwSwapBuffers(window);
    }

    // Cleanup
    ImGui_ImplOpenGL3_Shutdown();
    ImGui_ImplGlfw_Shutdown();
    ImGui::DestroyContext();

    glfwDestroyWindow(window);
    glfwTerminate();

    return 0;
}
